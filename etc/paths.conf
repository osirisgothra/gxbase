#!/bin/bash -r -c '/bin/echo "You must not run this as a program, it will be auto-run at"'
#===============================================================================
#
#          FILE: paths.conf
# 
#         USAGE: ./paths.conf 
# 
#   DESCRIPTION: @s 
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Gabriel Thomas Sharp (gts), osirisgothra@hotmail.com
#  ORGANIZATION: Paradisim Enterprises, LLC - http://paradisim.twilightparadox.com
#       CREATED: 01/16/2015 13:00
#      REVISION:  ---
#===============================================================================

#
# __PATHCONF_PATHS
#
# defines paths for adding, with a kind, to perform mid-level operations on a PATH:
# 
# syntax: ...=( "kind=/path/to/target/dir" )
#
# kind must be one of: 	pre		prepend path to the beginning of the PATH variable.
#						post	append it to the end of the PATH variable.
#						init	erase PATH and then set as only path in the PATH variable.
#						kill	remove path from the PATH variable.
#						save	snapshot PATH at it's current state (processed items prior WILL be saved, too).
#						load	revert the PATH to the last snapshot taken (or to NOTHING if no save has been made).
#

__PATHCONF_PATHS=( 	"init=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
					"post=/usr/share/bin"
  					"post=/usr/local/share/bin"
					"pre=/src/gxbase/main"
					"pre=/opt/activeperl/bin"
					"pre=/opt/baudline"
					"pre=/home/gabriel/bin"
					"post=/src/gxbase/main/bin"
					"post=."					
				 )
				 # to emulate system behavior on a blank path, add:
					 # ..to the first line above

# 
# echo(), echoer()
#
# tempoary alters the behavior of the 'echo' builtin
#
# behavior: create flag file shown below to ENABLE output
#			this script is QUIET by default (even errors)
#			change name to "echoer" to force output always
# disabler: auto or manual
#

#  -- uncomment one only (comment out the one you are NOT using too!)
function echo()
#function echoer()
 { 
	local r=$?
	[[ -r ~/.pathconf-debug-on ]] && builtin echo "$@"
	return $r
 }

# prevent bad things from skipping cleanup of echo function:
trap 'unset -f echo' SIGTSTP SIGINT SIGTTOU SIGTTIN SIGHUP

# 
# MAIN SCRIPT
#
# Script Features
# 		- a non-reentrant script and is protected as such
#		- assumed interactive, with #!shbang protection
#       - quiet by default (see above)
#       - cannot be forced to run >1 time per shell (even if code is modified)
#		- modifications to script will take effect after NEXT restart of bash
#		- called by /etc/bash.bashrc(5) /etc/profile(5) via bash(1) or sh(1)
#		- untested with tcsh(1) or other shells
#		- tested on xterm(1) and konsole(1)
# See Also
#		- vim(1) for editing, 				echo keyword ( bash(1), sh(1), etc )
#		- nano(1) for quick-edits			function keyword (ditto)
# 		- gvim(1) for gui-editing
#
if [[ -z $PATH_CONF_DEFINED ]]; then
	for __PATHCONF_PATHX in "${__PATHCONF_PATHS[@]}"
	do
		__PATHCONF_PATH="${__PATHCONF_PATHX##*=}"
		__PATHCONF_KIND="${__PATHCONF_PATHX%%=*}"

			echo "$__PATHCONF_KIND - adding $__PATHCONF_PATH to \$PATH!"
			case "$__PATHCONF_KIND" in		
				post|pre)	if [[ $PATH =~ (^|:)"$__PATHCONF_PATH"($|:) ]]; then
								echo "Warning duplicate path: $__PATHCONF_PATH ..in paths.conf (PATH=$PATH)"
								continue
							fi ;;&
				post)	PATH+=":$__PATHCONF_PATH";;
				 pre)	PATH="${__PATHCONF_PATH}:$PATH";;
				init)   PATH="$__PATHCONF_PATH";;			
				kill)   		if [[ $PATH =~ (^|:)"$__PATHCONF_PATH"($|:) ]]; then
									PATH="${PATH//$__PATHCONF_PATH}"
								else
									echo "Warning missing path: $__PATHCONF_PATH in PATH, nothing killed!"
								fi;;
				save)   __PATHCONF_SAVE="$PATH";;
				load)	PATH="$__PATHCONF_SAVE";;
				   *)	echo "Warning: path kind not understood $__PATHCONF_KIND for $__PATHCONF_PATH, skipping it...";;
			esac

	done
	readonly PATH_CONF_DEFINED=1
else
	echo "Skipping $BASH_SOURCE configuration, already loaded!"
fi

# ensure echo gets restored!!
unset -f echo
trap - SIGTSTP SIGTTOU SIGTTIN SIGHUP
set +v +x

