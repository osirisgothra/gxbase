#!/bin/bash
#
# mixall
#
# sets ALL mixer simple controls for ALSA controlled sound cards to the same volume, 
# specified by the user. The default value is 75.
#
# syntax: mixall [level]
#
# This command affects every channel except for "Master" "Bass" "Treble" which often do not need
# to be reset. This script was written to handle cards with many controllers that were being
# constantly reset by over-reaching programs who like to max-out all the mixer values causing
# much hated distortion.
#
# Automation:
#
#   if you want this to be an automatic process, you can either use upstart or cron, and link
#   to this script. If you have more or less channels that you want ignored, please set the
#   IGNORE_CHANNELS to the channels you want ignored. It must be a list separated by commas:
#     IGNORE_CHANNELS="Headphones,Equalizer Low,Equalizer Mid,Equalizer High"
#     or
#     IGNORE_CHANNELS=" "
#      The second entry would set ALL channels, the space and quotes are essential, otherwise the
#      defaults will be used!! The default values are "Master,Bass,Treble".
#
# Authentication
#     No sudo commands are used, make sure you are a member of "audio" group to use this script!
#
# new (may 2014) code 
# -- added card count routine
# -- added sourceguard
# IGNORE_CHANNELS: a comma-separated list of channels to match - ignores these channels for setting
# MAX_CARD_TEST = maximum # of cards to allow (will stop checking for cards after this many have been found, or until no more are found, whichever comes first)
#                 if you want, you can set this to "i+1" which is the same as saying "infinite" or some outrageous value like 32767 which is the physical limit (or $INFINITE)
# rewrote entire script (may 23, 2014) except the card count and sourceguard routines
# new features include:
# -- cached mix commands: all mixing is done at once per card, instead of calling amixer multiple times
#    accountable for a 1000% performance gain
# -- using tempfiles for mixing instructions instead of variables, thus eliminating the need for 
#    complex parsing. 
# -- removed the need for resetting IFS, now dependant on the default IFS which causes the script
#    to be more stable, and less fragile
# -- added ANSI into the prompts to consolidate screen usage, now only card*#channels ignored+2 lines
#    of text, i.e., if you have 2 cards ignoring only master, then it will use 4 lines of text none
#    exceeding 30 characters in width. (4 x 30 max) 
# -- audio group pre-check
#    so we don't have to get a million messages from amixer that it cant do it because you are not
#    in the right group, theoretically

# source protection, prevents variables from becoming part of the user's
# environment. You may source this script safely without harming your current
# environment. If you set MIXALL_CLOBBER_ENVIRONMENT, as seen here, it will not check
# for this and the script will act as a sourced script, which is not recommended unless part
# of another script that will be run and not sourced by the user. Exit is used beyond this
# point and if ran from the command line will cause it to exit or log out!

getopt -T
[[ $? -ne 4 ]] && { 
	[[ ! -r ~/.config/.mixall-one-time-warning ]] && { 

		echo "One-Time Warning: compatibility mode enabled or old getopt() program, this script is NOT compatible with that!"
	
		mkdir ~/.config -f
		touch ~/.config/.mixall-one-time-warning
		
	}
}

	

ARGS=`getopt -n "mixall" -o h -l help -- "$@"`
[[ $? -ne 0 ]] && exit $?
eval set -- "$ARGS"

while [[ "$1" != "--" ]]; do
	case $1 in
		-h|-help)
			echo "mixall [level]"
			exit 0;;
		*)
			echo "fatal: unknown $1"
			exit 122;;
	esac
	shift
done
shift

if [[ $# -gt 1 ]]; then
	echo "Too many arguments! Using only first one: $1"
fi

[[ -z $MIXALL_CLOBBER_ENVIRONMENT ]] && [[ ${-//[^i]/} ]] && { eval $BASH_SOURCE "$@"; return $?; }

# audio group pre-check
if (! groups | grep audio -q) && [[ $UID -ne 0 ]]; then
	echo "Error: you must be a member of the audio group (or root) to use this script."
	exit 1
fi

# these variables can be overridden if user specifies them in the previous environment
# note they must have been exported to carry over, even if they source this script
# explicitly (since it protects itself from sourcing)

[[ -z $IGNORE_CHANNELS ]] && IGNORE_CHANNELS="Master,Bass,Treble"
[[ -z $DEFAULT_VOLUME ]] && DEFAULT_VOLUME=75

INFINITE=32767
FIRST=0
IGNORE_CASE_IGNORE=1
MAX_CARD_TEST=$INFINITE
HASTTY=$( (tty -s) && echo 1 || echo 0 )
TTY=$(tty)

function cardcount()
{
	declare -i j=0
	for ((i=$FIRST;i<$MAX_CARD_TEST;i++)); do
		if ((HASTTY)); then		
			echo -ne "[strying card $i...[u" > $TTY
			#sleep 0.125
			# uncomment above if you want to actually see whats going on
		fi
		if (amixer -c$i &> /dev/null); then
			((j++))
		else
			break;
		fi		
	done
	echo $j
	if [[ $j > 0 ]]; then
		return 0;
	else
		return 1;
	fi
	# dont need it again
	unset -f cardcount
}

CARD_COUNT=$(cardcount)

if [[ $CARD_COUNT > 0 ]]; then
	echo "[2K[0GFound $CARD_COUNT cards."
else
	echo "[2K[0GFound no cards ($CARD_COUNT)!"
	exit 1
fi

# ensure that $1 is numeric beyond this point, or set it to 75 (the default) if not
if [[ $1 ]]; then
	declare -i N1=$1
	set -- $N1
else
	set -- $DEFAULT_VOLUME
fi
if [[ $1 < 0 && $1 > 100 ]]; then
	echo "warning: no volume specified, setting default to $DEFAULT_VOLUME"
	set -- $DEFAULT_VOLUME
fi

# i = indexer  l = limit
declare -i l=$CARD_COUNT
for ((i=0;i<l;i++)); do
	printf "[2K[0GSetting card ${i}..."
 	# acquire a tempfile for these channels
 	CHANFILE=$USERNAME_$(tempfile).mix
	for j in `amixer -c${i} | grep -Po "(?<=Simple mixer control..)[^']*" | tr ' ' '_' | tr '\n' ' '`; do
		printf "[2K[0GChannel: '${j//_/ }'[20G"
		# this is so the user can see, uncomment if you cannot see what's going on
		#sleep 0.0125
		if (echo $j|grep -Pq "(${IGNORE_CHANNELS//,/|})"); then
			# comment out if you dont like the "ignore messages"
			printf "Ignoring [Card $i]\n"
		else		
			printf "sset \"${j//_/ }\" $1\n" >> $CHANFILE
		fi

	done	
	# now apply mixer settings for this channel, all at one shot, this is much
	# faster than multiple calls to the program and is why we do it this way:
	amixer -c${i} -sq < $CHANFILE
	# remove the temporary file
	# you can comment out this next line if you want to check the command files
	rm -f $CHANFILE
done
printf "[2K[0GDone, Set $l card(s).\n"
