#!/bin/bash

# unlockdir
#
#        unlocks a locked directory to access 777 non-recursively
#        and saves the previous permissions in an unlock file for
#        later use by the lockdir script
#
#        by Gabriel Sharp <osirisgothra@hotmail.com>
#				 see LICENSE for details on the GNU GPL 2 license (no longer LGPL)


export LASTDIR="$_"

case $- in *i*) $BASH_SOURCE "$@"; ERR=$?; unset LASTDIR; return $ERR;; esac

if groups | grep sudo -q || [[ $UID -eq 0 ]]; then

function esudo()
{
	if [[ $UID -eq 0 ]]; then
		eval "$@"
	else
		eval sudo "$@"
	fi
	return $?
}


if [[  -d $LASTDIR ]] && [[ $# -eq 0 ]]; then
	echo "No directory given, using last directory from last command"
	echo "$_"
	echo "N = abort   Y = continue"
	read
	if [[ $REPLY == n ]]; then
		exit 1
	fi
	set -- $LASTDIR
	unset LASTDIR
fi


if [[ $# != 1 ]]; then
	[[ $# -eq 0 ]] && echo -ne "Insufficient arguments, need a" || echo -ne "Too many arguments, expected single"; 	echo " directory"
	exit 1
elif [[ ! -d $1 ]]; then
	echo "Not a directory: $1"
	exit 1
else
	if [[ -r "$1/.unlocked" ]]; then
		echo "error: already unlocked, use lockdir to re-lock the directory"
	else
		esudo stat "$1" --format="%a" | esudo tee "$1/.unlocked"
		[[ $? -eq 0 ]] && echo "Wrote lock code." || { echo "Couldnt write lock code, make sure you can use [sudo] with [tee] and [stat]."; return 1; }
		esudo chmod a+rwx "$1"
		[[ $? -eq 0 ]] && echo "Unlocked" || { echo "Unlock failed, check if you can use sudo with [chmod] and try again."; return 1; }
	fi
fi


else
	echo "Only users who can use sudo, or root, can use this command"
fi


