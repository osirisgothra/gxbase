#!/bin/bash

function usage()
{
	cat <<-EOF
Adds a video mode to the Xorg mode table

	syntax: addvmode [Width] [Height] {[Frequency]}

Arguments
---------

		Width			
							The horizontal count of pixels for each scanline,
		        	also known as the X-resolution, calculated at 96dpi.
		Height 		
							The vertical count of scanlines from top to bottom,
							also known as the Y-resolution.
		Frequency 
							The number of refreshes (count of scanlines exposure
							to a magnetic pass of the photon gun) per second, the
							default is 60hz, which is just a referential identity
							to the real frequency, which is in the end, is given
							by the cvt utility that calculates video timing.
							
Prompting
---------
							You will be shown the real frequency BEFORE adding the
							mode and allowed to cancel the process if you want.

Ranges
------  		
							The ranges for the arguments above is shown in this table
							and is checked using the precision calculation program, bc:

							Argument		Maximum Value					Minimum Value		Measured In
							--------------------------------------------------------------
							Width				8048									256							Pixels
							Height			8048									256							Pixels
							Frequency		1818.0414							0.1							Hertz(Hz)
							--------------------------------------------------------------

Notes
-----
							Required Packages
							
							coreutils		(GNU core utilities)
													echo,exit
							bc					(An arbitrary precision calculator language)
							xrandr		  (primitive command line interface to RandR extensions)
							cvt					(calculator of VESA CVT mode lines)
		 					bash				(GNU Bourne-Again SHell) -- needed to run this 					

  License & Info							
	--------------
							
	Written by  Gabriel T. Sharp <osirisgothra@hotmail.com>
              Copyright (c) 2013 Paradisim Enterprises, LLC

  This program is free software; you can redistribute it and/or modify it under
 	the terms of the GNU General Public License as published by the Free Software
 	Foundation; either version 2 of the License, or (at your option) any later 
	version. This program is distributed in the hope that it will be useful, but 
	WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
	details. You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation, Inc., 
	59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

EOF
	unset usage
	return 1;

}


case $# in
	0) usage; exit;;
  1) usage; exit;;
	2) echo "No frequency specified, using default (60Hz)";
		 set $[$1] $[$2] 60 ;&
	3) set $[$1] $[$2] $3
		 # the calculations done by cvt are only valid in
		 # the ranges of 0.1Hz - 1818.0414Hz, they may not all make sense
		 # but lower than 0.1Hz* gives an error (*actually its 0.[20 zeros]1)
		 # and values higher than 1818.0414 will yield frequencies with 
		 # negative numbers in them. For highest compatibility I will allow
		 # anything cvt says is okay. The frequency range is checked at
		 # 256x256 resolution, so I had to limit it to that even though
		 # cvt allows down to 1x1(why, isnt that just an LED??).
		 # Anyways, frequencies into the Khz range will yield negative 
		 # horizontal frequencies if the resolution drops below 256x256
		 # and 8048x8048 is the upper limit because the HorzFreq starts
		 # into the pre-Khz range after that point, which is beyond the
		 # possibilities for it's purpose. See Also: cvt(1) xrandr(1) Xrandr(3)
		 if [ "$(echo "$3 < 0.1 && $3 > 1818.0414" | bc -l)" == "1" ] ; then
			 echo "Frequency is out of range, must be between 0.1 and 1818.0414"
			 exit
		 elif [ $1 -lt 256 ] || [ $1 -gt 8048 ] || [ $2 -lt 256 ] || [ $2 -gt 8048 ]; then 
				echo "Width/Height out of range, must be [256-8048]x[256-8048]"
				exit
		 fi
		 echo "Initial Checks Passed, Detecting Mode..."
	 	 ;;	 
	*) echo "TOO MANY ARGUMENTS!"; usage; exit;;
esac




cvt $@
function didifail()
{
	if [ $1 -eq 0 ]; then
		echo "[32;1mOK[0m"
	elif [ $1 -eq 1 ]; then
		echo "[31;1mERROR[0m"
	else
		echo "[33;1mRETURNED ERROR $1[0m"
	fi
}
alias didwefail='didifail $?'

echo "Add this mode? [y/n]"
if (choice); then  
	echo -ne "Adding new mode ~ ${1}x${2} ${3}..."
	xrandr --newmode ${1}x${2}x${3} $(echo `cvt $@` | grep -Po '(?<=.00\" ).*')
	didwefail
	echo -ne "Adding to DVI-0..."
	xrandr --addmode DVI-0 ${1}x${2}
	didwefail
	echo -ne "Adding to DVI-1..."
	xrandr --addmode DVI-1 ${1}x${2}
  didwefail
	echo -ne "Adding to S-video..."
	xrandr --addmode S-video ${1}x${2}
  didwefail
	echo "DONE"
else
	echo "Aborting, nothing will be done"
fi
