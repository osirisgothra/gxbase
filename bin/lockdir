#!/bin/bash

# Please read unlockdir's header comments for LICENSE and information
# or contact Gabriel Sharp <osirisgothra@hotmail.com>
#
# lockdir
#
#       locks a directory previously unlocked by the unlock script
#       by taking and applying the unlock file to restore it's 
#       original permissions (non recursive)
#        
#  			NOTE: unlockdir/lockdir do not neccesarily have to lock/unlock
#             a directory, it can also be used to temporarily apply
#             permissions: use unlock, then set custom permissions,
#             when your done, use lock to restore the originals.
#							In this way, you can temporarily "lock" a directory.
#


export LASTDIR="$_"

case $- in *i*) $BASH_SOURCE "$@"; ERR=$?; unset LASTDIR; return $ERR;; esac

if groups | grep sudo -q || [[ $UID -eq 0 ]]; then

function esudo()
{
	if [[ $UID -eq 0 ]]; then
		eval "$@"
	else
		eval sudo "$@"
	fi
	return $?
}


if [[  -d $LASTDIR ]] && [[ $# -eq 0 ]]; then
	echo "No directory given, using last directory from last command"
	echo "$_"
	echo "N = abort   Y = continue"
	read
	if [[ $REPLY == n ]]; then
		exit 1
	fi
	set -- $LASTDIR
	unset LASTDIR
fi


if [[ $# != 1 ]]; then
	[[ $# -eq 0 ]] && echo -ne "Insufficient arguments, need a" || echo -ne "Too many arguments, expected single"; 	echo " directory"
	exit 1
elif [[ ! -d $1 ]]; then
	echo "Not a directory: $1"
	exit 1
else
	if [[ -r $1/.unlocked ]]; then
		echo "Locking $1..."
		esudo chmod $(cat $1/.unlocked | grep "[0-9]{3}" )		
		[[ $? -eq 0 ]] && echo "Directory Locked." || { echo "Couldnt lock the directory, check your access rights and try again."; return 1; }
		esudo rm -f "$1/.unlocked"
		[[ $? -eq 0 ]] && echo "Removed unlock code." || { echo "Couldnt remove unlock code, you may not be allowed to use [sudo rm] commands."; return 1; }
	else
		echo "Error: this directory either was not locked using [unlock] or the unlock file is missing ($1/.unlock not found)."
		return 1
	fi
fi


else
	echo "Only users who can use sudo, or root, can use this command"
fi


