let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
map! <M-Down> :<PageDown>
map! <M-Up> :<PageUp>
map! <M-Right> :foldopen
map! <M-Left> :foldclose
imap <S-Tab> <Del>
map! <C-Ã‚>‰ :tabpreviousi
map! <C-Tab> :tabnexti
map! <S-F1> :call GoFollow()
map! <F1> :call GetExtHelp()
map! <M-S-Down> <C-Left>guw<C-Right>
map! <M-S-Up> <C-Left>gUw<C-Right>
map! <M-Insert> P
map! <C-Down> :move +1
map! <C-Up> :move -2
map! <S-Home> v<Home>
map! <S-End> v<End>
map! <S-Right> v<Right>
map! <S-Left> v<Left>
map! <S-Down> v<Down>
map! <S-Up> v<Up>
map! <M-C-S-Right> :PERLCOMPLETERCYCLE
map! <M-S-Left> :foldclose
map! <M-S-Right> :foldopen
imap <M-C-Right> :silent! set foldlevel+=1:set foldlevel?i
imap <M-C-Left> :silent! set foldlevel-=1:set foldlevel?i
imap <S-Esc> :PREVCOLORi
imap <C-S-]> :NEXTCOLORi
vmap  y
vmap 	 >>
nmap 	 <C-Right>
vmap  <S-Insert>
vmap  <S-Del>
map [1;3B :normal [6~
map [1;3A :normal [5~
map [1;3C :foldopen
map [1;3D :foldclose
vmap ,gq :s/\s\+/ /ggvgq
nmap ,gq :%s/\s\+/ /ggq1G
vmap [% [%m'gv``
map \c :echo g:colors_name
map \p :CP
map \n :CN
vmap ]% ]%m'gv``
vmap _j :call Justify('tw',4)
nmap _j :%call Justify('tw',4)
vmap a% [%v]%
noremap c y
map fold :tabnew ~/.vimrc_global:set hls/STATIC.SETTINGS.ARE.HERE..DON.T.USE.SET.
nmap gx <Plug>NetrwBrowseX
map |rwp <Plug>RestoreWinPosn
map |swp <Plug>SaveWinPosn
map <Del> "_x
vmap <S-End> <End>
vmap <S-Home> <Home>
vmap <S-Down> <Down>
vmap <S-Up> <Up>
vmap <S-Left> <Left>
vmap <S-Right> <Right>
nmap <S-End> v<End>
omap <S-End> v<End>
nmap <S-Home> v<Home>
omap <S-Home> v<Home>
nmap <S-Down> v<Down>
omap <S-Down> v<Down>
nmap <S-Up> v<Up>
omap <S-Up> v<Up>
nmap <S-Left> v<Left>
omap <S-Left> v<Left>
nmap <S-Right> v<Right>
omap <S-Right> v<Right>
map <M-Down> :<PageDown>
map <M-Up> :<PageUp>
map <M-Right> :foldopen
map <M-Left> :foldclose
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <F11> :call conque_term#exec_file()
nmap <silent> <Plug>RestoreWinPosn :call RestoreWinPosn()
nmap <silent> <Plug>SaveWinPosn :call SaveWinPosn()
vmap <S-Tab> <<
vmap <S-Del> x
nmap <S-Tab> <C-Left>
map <C-Ã‚>‰ :tabprevious
map <C-Tab> :tabnext
map <S-F1> :call GoFollow()
map <F1> :call GetExtHelp()
map <M-S-Down> <C-Left>guw<C-Right>
map <M-S-Up> <C-Left>gUw<C-Right>
map <M-Insert> P
map <C-Down> :move +1
map <C-Up> :move -2
map <M-C-S-Right> :PERLCOMPLETERCYCLE
map <M-S-Left> :foldclose
map <M-S-Right> :foldopen
map <M-C-Right> :silent! set foldlevel+=1:set foldlevel?
map <M-C-Left> :silent! set foldlevel-=1:set foldlevel?
map <S-Esc> :PREVCOLOR
map <C-S-]> :NEXTCOLOR
inoremap  
map! [1;3B :normal [6~
map! [1;3A :normal [5~
map! [1;3C :foldopen
map! [1;3D :foldclose
iabbr atchrome file:///home/gabriel/.mozilla/firefox/lhry73tb.dev-edition-default/chrome
iabbr athttp @namespace url('http://www.w3.org/1999/xhtml')
iabbr atxul @namespace url('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul')
iabbr !i !important;
iabbr (C) (C) Copyright 2014-2015 Paradisim Enterprises(tm), LLC. (Gabriel Sharp <osirisgothra@hotmail.com>)
iabbr p.e. Paradisim Enterprises, LLC.
iabbr g.s. Gabriel Sharp <osirisgothra@hotmail.com>
let &cpo=s:cpo_save
unlet s:cpo_save
set backspace=indent,eol,start
set cmdheight=4
set completefunc=YouCompleteMe#Complete
set fileencodings=ucs-bom,utf-8,default,latin1
set foldclose=all
set foldopen=jump,mark,hor,search,quickfix,tag,undo
set helplang=en
set laststatus=2
set omnifunc=GoVimComplete
set printoptions=paper:letter
set ruler
set runtimepath=~/.vim,~/.vim/bundle/Vundle.vim,~/.vim/bundle/vim-css3-syntax,~/.vim/bundle/syntastic,~/.vim/bundle/vim-plugins,~/.vim/bundle/YouCompleteMe,~/.vim/bundle/unite.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after,~/.vim/bundle/Vundle.vim,~/.vim/bundle/Vundle.vim/after,~/.vim/bundle/vim-css3-syntax/after,~/.vim/bundle/syntastic/after,~/.vim/bundle/vim-plugins/after,~/.vim/bundle/YouCompleteMe/after,~/.vim/bundle/unite.vim/after
set scrollopt=ver,jump,hor
set shiftwidth=4
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=4
set wrapmargin=1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd /src/gxbase/tools
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 mk-linked-scripts.sh
badd +0 mk-linked-scripts.sh.save
badd +1728 ~/.vimrc_global
badd +72 ~/.vimrc_g
badd +0 ~/.vimrc
argglobal
silent! argdel *
argadd mk-linked-scripts.sh
argadd mk-linked-scripts.sh.save
set stal=2
edit mk-linked-scripts.sh
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 63 + 63) / 127)
exe 'vert 2resize ' . ((&columns * 63 + 63) / 127)
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call BASH_Debugger()
inoremap <buffer> <S-F9> :BashScriptArguments 
inoremap <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
inoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
nnoremap <buffer> <silent> <NL> i=BASH_JumpForward()
nnoremap <buffer> "" ciW""P
nnoremap <buffer> '' ciW''P
vnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
nnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
vnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
nnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
vnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
nnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
vnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
nnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
vnoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH")
nnoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH")
vnoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes")
nnoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes")
vnoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except","v")
nnoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except")
vnoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one","v")
nnoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one")
vnoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more","v")
nnoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more")
vnoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more","v")
nnoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more")
vnoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one","v")
nnoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one")
vnoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document","v")
nnoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document")
vnoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir")
nnoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir")
vnoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts")
nnoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts")
vnoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set")
nnoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set")
vnoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins")
nnoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins")
vnoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment")
nnoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment")
vnoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams")
nnoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams")
vnoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub")
nnoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub")
vnoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp")
nnoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp")
vnoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t")
nnoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t")
vnoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v")
nnoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v")
vnoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o")
nnoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o")
vnoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison")
nnoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison")
vnoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics")
nnoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics")
vnoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types")
nnoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types")
vnoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions")
nnoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions")
vnoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests")
nnoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests")
vnoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices","v")
nnoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices")
vnoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element","v")
nnoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element")
vnoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray","v")
nnoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray")
vnoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string","v")
nnoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string")
vnoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all","v")
nnoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all")
vnoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element","v")
nnoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element")
vnoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf","v")
nnoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf")
vnoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo","v")
nnoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo")
vnoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function","v")
nnoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function")
vnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while","v")
nnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while")
vnoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until","v")
nnoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until")
vnoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select","v")
nnoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select")
vnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else","v")
nnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else")
vnoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if","v")
nnoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if")
vnoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for","v")
nnoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for")
vnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in","v")
nnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in")
vnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif")
nnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif")
vnoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case")
nnoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case")
vnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros")
nnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros")
vnoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments")
nnoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments")
vnoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections")
nnoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections")
vnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time")
nnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time")
vnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date")
nnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date")
vnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header")
nnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header")
vnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function")
nnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function")
vnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame")
nnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame")
noremap <buffer> <silent> |hbs :call BASH_HelpBashSupport()
noremap <buffer> <silent> |hm :call BASH_help('man')
noremap <buffer> <silent> |hh :call BASH_help('help')
noremap <buffer> <silent> |hb :call BASH_help('bash')
nnoremap <buffer> <silent> |rs :call BASH_Settings()
noremap <buffer> <silent> |rd :call BASH_Debugger()
noremap <buffer> <silent> |ro :call BASH_Toggle_Gvim_Xterm()
vnoremap <buffer> <silent> |rh :call BASH_Hardcopy("v")
nnoremap <buffer> <silent> |rh :call BASH_Hardcopy("n")
noremap <buffer> <silent> |re :call BASH_MakeScriptExecutable()
noremap <buffer> |rba :BashArguments 
noremap <buffer> |ra :BashScriptArguments 
noremap <buffer> <silent> |rco :call BASH_SyntaxCheckOptionsLocal()
noremap <buffer> <silent> |rc :call BASH_SyntaxCheck()
vnoremap <buffer> <silent> |rr :call BASH_Run("v")
nnoremap <buffer> <silent> |rr :call BASH_Run("n")
onoremap <buffer> <silent> |rr :call BASH_Run("n")
nnoremap <buffer> <silent> |nv :call BASH_CodeSnippet("view")
nnoremap <buffer> <silent> |ne :call BASH_CodeSnippet("edit")
vnoremap <buffer> <silent> |nw :call BASH_CodeSnippet("writemarked")
nnoremap <buffer> <silent> |nw :call BASH_CodeSnippet("write")
nnoremap <buffer> <silent> |nr :call BASH_CodeSnippet("read")
noremap <buffer> <silent> |cr :call BASH_remove_echo()j'
noremap <buffer> <silent> |ce :call BASH_echo_comment()j'
vnoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
nnoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
vnoremap <buffer> <silent> |cc :call BASH_CodeComment()
nnoremap <buffer> <silent> |cc :call BASH_CodeComment()
vnoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
nnoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
vnoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
nnoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
vnoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
nnoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
noremap <buffer> <silent> <F9> :call BASH_Debugger()
noremap <buffer> <S-F9> :BashScriptArguments 
noremap <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
vnoremap <buffer> <silent> <C-F9> :call BASH_Run("v")
nnoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
onoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
inoremap <buffer> <silent> <NL> =BASH_JumpForward()
inoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
inoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
inoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
inoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
inoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH","i")
inoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes","i")
inoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except","i")
inoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one","i")
inoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more","i")
inoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more","i")
inoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one","i")
inoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document","i")
inoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir","i")
inoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts","i")
inoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set","i")
inoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins","i")
inoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment","i")
inoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams","i")
inoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub","i")
inoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp","i")
inoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t","i")
inoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v","i")
inoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o","i")
inoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison","i")
inoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics","i")
inoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types","i")
inoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions","i")
inoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests","i")
inoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices","i")
inoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element","i")
inoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray","i")
inoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string","i")
inoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all","i")
inoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element","i")
inoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf","i")
inoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo","i")
inoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function","i")
inoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while","i")
inoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until","i")
inoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select","i")
inoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else","i")
inoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if","i")
inoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for","i")
inoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in","i")
inoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif","i")
inoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case","i")
inoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros","i")
inoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments","i")
inoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections","i")
inoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time","i")
inoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date","i")
inoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header","i")
inoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function","i")
inoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame","i")
inoremap <buffer> <silent> |hbs :call BASH_HelpBashSupport()
inoremap <buffer> <silent> |hm :call BASH_help('man')
inoremap <buffer> <silent> |hh :call BASH_help('help')
inoremap <buffer> <silent> |hb :call BASH_help('bash')
inoremap <buffer> <silent> |rd :call BASH_Debugger()
inoremap <buffer> <silent> |ro :call BASH_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> |re :call BASH_MakeScriptExecutable()
inoremap <buffer> |rba :BashArguments 
inoremap <buffer> |ra :BashScriptArguments 
inoremap <buffer> <silent> |rco :call BASH_SyntaxCheckOptionsLocal()
inoremap <buffer> <silent> |rc :call BASH_SyntaxCheck()
inoremap <buffer> <silent> |rr :call BASH_Run("n")
inoremap <buffer> <silent> |nv :call BASH_CodeSnippet("view")
inoremap <buffer> <silent> |ne :call BASH_CodeSnippet("edit")
inoremap <buffer> <silent> |nw :call BASH_CodeSnippet("write")
inoremap <buffer> <silent> |nr :call BASH_CodeSnippet("read")
inoremap <buffer> <silent> |cr :call BASH_remove_echo()j'
inoremap <buffer> <silent> |ce :call BASH_echo_comment()j'
inoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
inoremap <buffer> <silent> |cc :call BASH_CodeComment()
inoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
inoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
inoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal cursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/bundle/vim-plugins/bash-support/wordlists/bash-keywords.list
setlocal diff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'sh'
setlocal filetype=sh
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=diff
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetShIndent()
setlocal indentkeys=0{,0},!^F,o,O,e,0=then,0=do,0=else,0=elif,0=fi,0=esac,0=done,),0=;;,0=;&,0=fin,0=fil,0=fip,0=fir,0=fix
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal scrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'sh'
setlocal syntax=sh
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=1
let s:l = 1 - ((0 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
wincmd w
argglobal
2argu
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call BASH_Debugger()
inoremap <buffer> <S-F9> :BashScriptArguments 
inoremap <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
inoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
nnoremap <buffer> <silent> <NL> i=BASH_JumpForward()
nnoremap <buffer> "" ciW""P
nnoremap <buffer> '' ciW''P
vnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
nnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
vnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
nnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
vnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
nnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
vnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
nnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
vnoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH")
nnoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH")
vnoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes")
nnoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes")
vnoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except","v")
nnoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except")
vnoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one","v")
nnoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one")
vnoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more","v")
nnoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more")
vnoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more","v")
nnoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more")
vnoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one","v")
nnoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one")
vnoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document","v")
nnoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document")
vnoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir")
nnoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir")
vnoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts")
nnoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts")
vnoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set")
nnoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set")
vnoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins")
nnoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins")
vnoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment")
nnoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment")
vnoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams")
nnoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams")
vnoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub")
nnoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub")
vnoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp")
nnoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp")
vnoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t")
nnoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t")
vnoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v")
nnoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v")
vnoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o")
nnoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o")
vnoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison")
nnoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison")
vnoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics")
nnoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics")
vnoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types")
nnoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types")
vnoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions")
nnoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions")
vnoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests")
nnoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests")
vnoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices","v")
nnoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices")
vnoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element","v")
nnoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element")
vnoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray","v")
nnoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray")
vnoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string","v")
nnoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string")
vnoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all","v")
nnoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all")
vnoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element","v")
nnoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element")
vnoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf","v")
nnoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf")
vnoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo","v")
nnoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo")
vnoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function","v")
nnoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function")
vnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while","v")
nnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while")
vnoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until","v")
nnoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until")
vnoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select","v")
nnoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select")
vnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else","v")
nnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else")
vnoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if","v")
nnoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if")
vnoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for","v")
nnoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for")
vnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in","v")
nnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in")
vnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif")
nnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif")
vnoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case")
nnoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case")
vnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros")
nnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros")
vnoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments")
nnoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments")
vnoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections")
nnoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections")
vnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time")
nnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time")
vnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date")
nnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date")
vnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header")
nnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header")
vnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function")
nnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function")
vnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame")
nnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame")
noremap <buffer> <silent> |hbs :call BASH_HelpBashSupport()
noremap <buffer> <silent> |hm :call BASH_help('man')
noremap <buffer> <silent> |hh :call BASH_help('help')
noremap <buffer> <silent> |hb :call BASH_help('bash')
nnoremap <buffer> <silent> |rs :call BASH_Settings()
noremap <buffer> <silent> |rd :call BASH_Debugger()
noremap <buffer> <silent> |ro :call BASH_Toggle_Gvim_Xterm()
vnoremap <buffer> <silent> |rh :call BASH_Hardcopy("v")
nnoremap <buffer> <silent> |rh :call BASH_Hardcopy("n")
noremap <buffer> <silent> |re :call BASH_MakeScriptExecutable()
noremap <buffer> |rba :BashArguments 
noremap <buffer> |ra :BashScriptArguments 
noremap <buffer> <silent> |rco :call BASH_SyntaxCheckOptionsLocal()
noremap <buffer> <silent> |rc :call BASH_SyntaxCheck()
vnoremap <buffer> <silent> |rr :call BASH_Run("v")
nnoremap <buffer> <silent> |rr :call BASH_Run("n")
onoremap <buffer> <silent> |rr :call BASH_Run("n")
nnoremap <buffer> <silent> |nv :call BASH_CodeSnippet("view")
nnoremap <buffer> <silent> |ne :call BASH_CodeSnippet("edit")
vnoremap <buffer> <silent> |nw :call BASH_CodeSnippet("writemarked")
nnoremap <buffer> <silent> |nw :call BASH_CodeSnippet("write")
nnoremap <buffer> <silent> |nr :call BASH_CodeSnippet("read")
noremap <buffer> <silent> |cr :call BASH_remove_echo()j'
noremap <buffer> <silent> |ce :call BASH_echo_comment()j'
vnoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
nnoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
vnoremap <buffer> <silent> |cc :call BASH_CodeComment()
nnoremap <buffer> <silent> |cc :call BASH_CodeComment()
vnoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
nnoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
vnoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
nnoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
vnoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
nnoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
noremap <buffer> <silent> <F9> :call BASH_Debugger()
noremap <buffer> <S-F9> :BashScriptArguments 
noremap <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
vnoremap <buffer> <silent> <C-F9> :call BASH_Run("v")
nnoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
onoremap <buffer> <silent> <C-F9> :call BASH_Run("n")
inoremap <buffer> <silent> <NL> =BASH_JumpForward()
inoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:BASH_Templates,"!pick")
inoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:BASH_Templates)
inoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:BASH_Templates,"reload","all")
inoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:BASH_Templates,-1)
inoremap <buffer> <silent> |pbr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.BASH_REMATCH","i")
inoremap <buffer> <silent> |ppc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.POSIX classes","i")
inoremap <buffer> <silent> |pae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.anything except","i")
inoremap <buffer> <silent> |peo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.exactly one","i")
inoremap <buffer> <silent> |pom :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.one or more","i")
inoremap <buffer> <silent> |pzm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or more","i")
inoremap <buffer> <silent> |pzo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"PatternMatching.zero or one","i")
inoremap <buffer> <silent> |ioh :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.here-document","i")
inoremap <buffer> <silent> |ior :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"IO-Redir.redir","i")
inoremap <buffer> <silent> |bso :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Shopts","i")
inoremap <buffer> <silent> |bse :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Set","i")
inoremap <buffer> <silent> |bbu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Builtins","i")
inoremap <buffer> <silent> |ben :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Environment","i")
inoremap <buffer> <silent> |bsp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"SpecParams","i")
inoremap <buffer> <silent> |bps :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"ParamSub","i")
inoremap <buffer> <silent> |tm :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string matches regexp","i")
inoremap <buffer> <silent> |tfd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file descriptor is open, refers to a terminal, -t","i")
inoremap <buffer> <silent> |tvs :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.variable has been set, -v","i")
inoremap <buffer> <silent> |toe :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.option is enabled, -o","i")
inoremap <buffer> <silent> |ts :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.string comparison","i")
inoremap <buffer> <silent> |tfc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file characteristics","i")
inoremap <buffer> <silent> |tft :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file types","i")
inoremap <buffer> <silent> |tfp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.file permissions","i")
inoremap <buffer> <silent> |ta :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Tests.arithmetic tests","i")
inoremap <buffer> <silent> |sai :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array indices","i")
inoremap <buffer> <silent> |san :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.no of element","i")
inoremap <buffer> <silent> |ssa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.subarray","i")
inoremap <buffer> <silent> |sas :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, string","i")
inoremap <buffer> <silent> |saa :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array elements, all","i")
inoremap <buffer> <silent> |sae :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.array element","i")
inoremap <buffer> <silent> |sp :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.printf","i")
inoremap <buffer> <silent> |se :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.echo","i")
inoremap <buffer> <silent> |sfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.function","i")
inoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.while","i")
inoremap <buffer> <silent> |su :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.until","i")
inoremap <buffer> <silent> |ss :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.select","i")
inoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if-else","i")
inoremap <buffer> <silent> |si :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.if","i")
inoremap <buffer> <silent> |sfo :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for","i")
inoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.for-in","i")
inoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.elif","i")
inoremap <buffer> <silent> |sc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Statements.case","i")
inoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.macros","i")
inoremap <buffer> <silent> |ckc :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.keyword comments","i")
inoremap <buffer> <silent> |css :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.script sections","i")
inoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date+time","i")
inoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.date","i")
inoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.file header","i")
inoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.function","i")
inoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:BASH_Templates,"Comments.frame","i")
inoremap <buffer> <silent> |hbs :call BASH_HelpBashSupport()
inoremap <buffer> <silent> |hm :call BASH_help('man')
inoremap <buffer> <silent> |hh :call BASH_help('help')
inoremap <buffer> <silent> |hb :call BASH_help('bash')
inoremap <buffer> <silent> |rd :call BASH_Debugger()
inoremap <buffer> <silent> |ro :call BASH_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> |re :call BASH_MakeScriptExecutable()
inoremap <buffer> |rba :BashArguments 
inoremap <buffer> |ra :BashScriptArguments 
inoremap <buffer> <silent> |rco :call BASH_SyntaxCheckOptionsLocal()
inoremap <buffer> <silent> |rc :call BASH_SyntaxCheck()
inoremap <buffer> <silent> |rr :call BASH_Run("n")
inoremap <buffer> <silent> |nv :call BASH_CodeSnippet("view")
inoremap <buffer> <silent> |ne :call BASH_CodeSnippet("edit")
inoremap <buffer> <silent> |nw :call BASH_CodeSnippet("write")
inoremap <buffer> <silent> |nr :call BASH_CodeSnippet("read")
inoremap <buffer> <silent> |cr :call BASH_remove_echo()j'
inoremap <buffer> <silent> |ce :call BASH_echo_comment()j'
inoremap <buffer> <silent> |cu :call BASH_CommentCode(0)
inoremap <buffer> <silent> |cc :call BASH_CodeComment()
inoremap <buffer> <silent> |cs :call BASH_GetLineEndCommCol()
inoremap <buffer> <silent> |cj :call BASH_AdjustLineEndComm()
inoremap <buffer> <silent> |cl :call BASH_EndOfLineComment()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal cursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/bundle/vim-plugins/bash-support/wordlists/bash-keywords.list
setlocal diff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'sh'
setlocal filetype=sh
endif
set foldcolumn=4
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=diff
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetShIndent()
setlocal indentkeys=0{,0},!^F,o,O,e,0=then,0=do,0=else,0=elif,0=fi,0=esac,0=done,),0=;;,0=;&,0=fin,0=fil,0=fip,0=fir,0=fix
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal scrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'sh'
setlocal syntax=sh
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=1
let s:l = 1 - ((0 * winheight(0) + 13) / 27)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
wincmd w
exe 'vert 1resize ' . ((&columns * 63 + 63) / 127)
exe 'vert 2resize ' . ((&columns * 63 + 63) / 127)
tabedit ~/.vimrc
set splitbelow splitright
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 1 + 15) / 30)
exe '2resize ' . ((&lines * 20 + 15) / 30)
exe '3resize ' . ((&lines * 1 + 15) / 30)
argglobal
1argu
enew
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=wipe
setlocal buflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != ''
setlocal filetype=
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=GoVimComplete
setlocal path=
setlocal nopreserveindent
setlocal previewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal winfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=1
wincmd w
argglobal
1argu
edit /usr/share/vim/vim74/doc/eval.txt
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> || ||<Left>
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=help
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nc
setlocal conceallevel=2
setlocal completefunc=YouCompleteMe#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'help'
setlocal filetype=help
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcroql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=!-~,^*,^|,^\",192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=GoVimComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'help'
setlocal syntax=help
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=1
silent! normal! zE
let s:l = 1637 - ((0 * winheight(0) + 10) / 20)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1637
normal! 033|
wincmd w
argglobal
1argu
edit ~/.vimrc
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> <silent> <NL> i=Vim_JumpForward()
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
vnoremap <buffer> <silent> |nw :call Vim_CodeSnippet("wv")
vnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:Vim_Templates,"!pick")
nnoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:Vim_Templates,"!pick")
vnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:Vim_Templates)
nnoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:Vim_Templates)
vnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:Vim_Templates,"reload","all")
nnoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:Vim_Templates,"reload","all")
vnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:Vim_Templates,-1)
nnoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:Vim_Templates,-1)
vnoremap <buffer> <silent> |he :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Help.english")
nnoremap <buffer> <silent> |he :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Help.english")
vnoremap <buffer> <silent> |dl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.list entry")
nnoremap <buffer> <silent> |dl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.list entry")
vnoremap <buffer> <silent> |de :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.example","v")
nnoremap <buffer> <silent> |de :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.example")
vnoremap <buffer> <silent> |df :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.function description")
nnoremap <buffer> <silent> |df :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.function description")
vnoremap <buffer> <silent> |dcu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, contents")
nnoremap <buffer> <silent> |dcu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, contents")
vnoremap <buffer> <silent> |dcs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, contents")
nnoremap <buffer> <silent> |dcs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, contents")
vnoremap <buffer> <silent> |dcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, contents")
nnoremap <buffer> <silent> |dcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, contents")
vnoremap <buffer> <silent> |dtu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, text")
nnoremap <buffer> <silent> |dtu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, text")
vnoremap <buffer> <silent> |dts :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, text")
nnoremap <buffer> <silent> |dts :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, text")
vnoremap <buffer> <silent> |dtc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, text")
nnoremap <buffer> <silent> |dtc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, text")
vnoremap <buffer> <silent> |pmw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Warning")
nnoremap <buffer> <silent> |pmw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Warning")
vnoremap <buffer> <silent> |pme :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-ErrorMsg")
nnoremap <buffer> <silent> |pme :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-ErrorMsg")
vnoremap <buffer> <silent> |pmc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Comment")
nnoremap <buffer> <silent> |pmc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Comment")
vnoremap <buffer> <silent> |pm :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg")
nnoremap <buffer> <silent> |pm :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg")
vnoremap <buffer> <silent> |pe :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Eval")
nnoremap <buffer> <silent> |pe :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Eval")
vnoremap <buffer> <silent> |pd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM DoCommand")
nnoremap <buffer> <silent> |pd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM DoCommand")
vnoremap <buffer> <silent> |ps :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.Perl snippet")
nnoremap <buffer> <silent> |ps :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.Perl snippet")
vnoremap <buffer> <silent> |xs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.switches")
nnoremap <buffer> <silent> |xs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.switches")
vnoremap <buffer> <silent> |xcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.character classes")
nnoremap <buffer> <silent> |xcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.character classes")
vnoremap <buffer> <silent> |xw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.word")
nnoremap <buffer> <silent> |xw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.word")
vnoremap <buffer> <silent> |xbn :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch, no capture","v")
nnoremap <buffer> <silent> |xbn :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch, no capture")
vnoremap <buffer> <silent> |xbc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch","v")
nnoremap <buffer> <silent> |xbc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch")
vnoremap <buffer> <silent> |xc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.capture","v")
nnoremap <buffer> <silent> |xc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.capture")
vnoremap <buffer> <silent> |if :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.function","v")
nnoremap <buffer> <silent> |if :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.function")
vnoremap <buffer> <silent> |ii :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.iterators","v")
nnoremap <buffer> <silent> |ii :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.iterators")
vnoremap <buffer> <silent> |st :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.try, catch","v")
nnoremap <buffer> <silent> |st :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.try, catch")
vnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.while","v")
nnoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.while")
vnoremap <buffer> <silent> |sel :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.else")
nnoremap <buffer> <silent> |sel :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.else")
vnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.elseif")
nnoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.elseif")
vnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, else","v")
nnoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, else")
vnoremap <buffer> <silent> |sif :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, end","v")
nnoremap <buffer> <silent> |sif :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, end")
vnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.for","v")
nnoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.for")
vnoremap <buffer> <silent> |sd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let dictionary")
nnoremap <buffer> <silent> |sd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let dictionary")
vnoremap <buffer> <silent> |sl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let list")
nnoremap <buffer> <silent> |sl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let list")
vnoremap <buffer> <silent> |sv :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let variable")
nnoremap <buffer> <silent> |sv :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let variable")
vnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.macros")
nnoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.macros")
vnoremap <buffer> <silent> |ck :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.keyword comments")
nnoremap <buffer> <silent> |ck :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.keyword comments")
vnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date-time")
nnoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date-time")
vnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date")
nnoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date")
vnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.file description")
nnoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.file description")
vnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.function")
nnoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.function")
vnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.frame")
nnoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.frame")
vnoremap <buffer> <silent> |ce :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.end-of-line comment")
nnoremap <buffer> <silent> |ce :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.end-of-line comment")
noremap <buffer> <silent> |hp :call Vim_HelpVimSupport()
nnoremap <buffer> <silent> |hk :call Vim_Help()
nnoremap <buffer> <silent> |rs :call Vim_Settings()
vnoremap <buffer> <silent> |rh :call Vim_Hardcopy("v")
nnoremap <buffer> <silent> |rh :call Vim_Hardcopy("n")
noremap <buffer> <silent> |ne :call Vim_CodeSnippet("e")
nnoremap <buffer> <silent> |nw :call Vim_CodeSnippet("w")
onoremap <buffer> <silent> |nw :call Vim_CodeSnippet("w")
noremap <buffer> <silent> |nr :call Vim_CodeSnippet("r")
vnoremap <buffer> <silent> |ca :call Vim_FunctionComment()
nnoremap <buffer> <silent> |ca :call Vim_FunctionComment()
vnoremap <buffer> <silent> |cu :call Vim_CommentCode(0)
nnoremap <buffer> <silent> |cu :call Vim_CommentCode(0)
vnoremap <buffer> <silent> |cc :call Vim_CodeComment()
nnoremap <buffer> <silent> |cc :call Vim_CodeComment()
vnoremap <buffer> <silent> |cs :call Vim_GetLineEndCommCol()
nnoremap <buffer> <silent> |cs :call Vim_GetLineEndCommCol()
vnoremap <buffer> <silent> |cj :call Vim_AdjustLineEndComm()
nnoremap <buffer> <silent> |cj :call Vim_AdjustLineEndComm()
vnoremap <buffer> <silent> |cl :call Vim_MultiLineEndComments()A
nnoremap <buffer> <silent> |cl :call Vim_EndOfLineComment()
inoremap <buffer> <silent> <NL> =Vim_JumpForward()
inoremap <buffer> <silent> |nts :call mmtemplates#core#ChooseStyle(g:Vim_Templates,"!pick")
inoremap <buffer> <silent> |rw :call mmtemplates#wizard#SetupWizard(g:Vim_Templates)
inoremap <buffer> <silent> |ntr :call mmtemplates#core#ReadTemplates(g:Vim_Templates,"reload","all")
inoremap <buffer> <silent> |ntl :call mmtemplates#core#EditTemplateFiles(g:Vim_Templates,-1)
inoremap <buffer> <silent> |he :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Help.english","i")
inoremap <buffer> <silent> |dl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.list entry","i")
inoremap <buffer> <silent> |de :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.example","i")
inoremap <buffer> <silent> |df :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.function description","i")
inoremap <buffer> <silent> |dcu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, contents","i")
inoremap <buffer> <silent> |dcs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, contents","i")
inoremap <buffer> <silent> |dcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, contents","i")
inoremap <buffer> <silent> |dtu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.subsection, text","i")
inoremap <buffer> <silent> |dts :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.section, text","i")
inoremap <buffer> <silent> |dtc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Documentation.chapter, text","i")
inoremap <buffer> <silent> |pmw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Warning","i")
inoremap <buffer> <silent> |pme :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-ErrorMsg","i")
inoremap <buffer> <silent> |pmc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg-Comment","i")
inoremap <buffer> <silent> |pm :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Msg","i")
inoremap <buffer> <silent> |pe :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM Eval","i")
inoremap <buffer> <silent> |pd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.VIM DoCommand","i")
inoremap <buffer> <silent> |ps :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Perl.Perl snippet","i")
inoremap <buffer> <silent> |xs :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.switches","i")
inoremap <buffer> <silent> |xcc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.character classes","i")
inoremap <buffer> <silent> |xw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.word","i")
inoremap <buffer> <silent> |xbn :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch, no capture","i")
inoremap <buffer> <silent> |xbc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.branch","i")
inoremap <buffer> <silent> |xc :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Regex.capture","i")
inoremap <buffer> <silent> |if :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.function","i")
inoremap <buffer> <silent> |ii :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Idioms.iterators","i")
inoremap <buffer> <silent> |st :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.try, catch","i")
inoremap <buffer> <silent> |sw :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.while","i")
inoremap <buffer> <silent> |sel :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.else","i")
inoremap <buffer> <silent> |sei :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.elseif","i")
inoremap <buffer> <silent> |sie :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, else","i")
inoremap <buffer> <silent> |sif :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.if, end","i")
inoremap <buffer> <silent> |sf :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.for","i")
inoremap <buffer> <silent> |sd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let dictionary","i")
inoremap <buffer> <silent> |sl :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let list","i")
inoremap <buffer> <silent> |sv :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Statements.let variable","i")
inoremap <buffer> <silent> |cma :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.macros","i")
inoremap <buffer> <silent> |ck :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.keyword comments","i")
inoremap <buffer> <silent> |ct :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date-time","i")
inoremap <buffer> <silent> |cd :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.date","i")
inoremap <buffer> <silent> |ch :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.file description","i")
inoremap <buffer> <silent> |cfu :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.function","i")
inoremap <buffer> <silent> |cfr :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.frame","i")
inoremap <buffer> <silent> |ce :call mmtemplates#core#InsertTemplate(g:Vim_Templates,"Comments.end-of-line comment","i")
inoremap <buffer> <silent> |hp :call Vim_HelpVimSupport()
inoremap <buffer> <silent> |hk :call Vim_Help()
inoremap <buffer> <silent> |ne :call Vim_CodeSnippet("e")
inoremap <buffer> <silent> |nw :call Vim_CodeSnippet("w")
inoremap <buffer> <silent> |nr :call Vim_CodeSnippet("r")
inoremap <buffer> <silent> |ca :call Vim_FunctionComment()
inoremap <buffer> <silent> |cu :call Vim_CommentCode(0)
inoremap <buffer> <silent> |cc :call Vim_CodeComment()
inoremap <buffer> <silent> |cs :call Vim_GetLineEndCommCol()
inoremap <buffer> <silent> |cj :call Vim_AdjustLineEndComm()
inoremap <buffer> <silent> |cl :call Vim_EndOfLineComment()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=170
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=YouCompleteMe#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker=\ ===,\ ...
setlocal foldmethod=marker
setlocal foldminlines=0
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=GoVimComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=172
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=1
let s:l = 192 - ((6 * winheight(0) + 0) / 1)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
192
normal! 014|
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 1 + 15) / 30)
exe '2resize ' . ((&lines * 20 + 15) / 30)
exe '3resize ' . ((&lines * 1 + 15) / 30)
tabnext 2
set stal=1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
