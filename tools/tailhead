#!/usr/bin/env bash 
#======================================================================================================================
#
#          FILE: tailhead
# 
#         USAGE: ./tailhead 
# 
#   DESCRIPTION: 
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Gabriel Thomas Sharp (gts), osirisgothra@hotmail.com
#  ORGANIZATION: Paradisim Enterprises, LLC, PA, USA
#       CREATED: 06/07/2015 14:19
#      REVISION:  ---
#  HELP CONTENT:
#					usage: tailhead <arguments>
#					
#					<arguments>		options you can pass to tailhead
#									
#					This script (C) Copyright 2014-2015 Paradisim Enterprises, LLC, PA, USA, Licensed under GNU GPL v3
#					You may get a copy of this LICENSE at the website: http://gpl.gnu.org
#					For more info, contact the author Gabriel Thomas Sharp osirisgothra@hotmail.com
#======================================================================================================================

shopt -s interactive_comments
set -o nounset                              			# Treat unset variables as an error.
declare -i HELP_TRIMLEADINGCHARCOUNT=6					# Change if you reformat above content!
case $- in *i*) "$BASH_SOURCE" "$@"; return $?;; esac	# Guard against the 'source' or '.' builtins!
[[ $# -ge 1 ]] && [[ $1 == +X ]] && { set -x; shift; }                    #\
	[[ $# -ge 1 ]] && [[ $1 == +V ]] && { set -v; shift; }					# >- allow use of +[X|V] for debugging (must be FIRST param!)
[[ $# -ge 1 ]] && [[ $1 == +XV || $1 == +VX ]] && { set -xv; shift; }     #/

# Example input and output (from the bash prompt):
# ./parse.bash -a par1 'another arg' --c-long 'wow!*\?' -cmore -b " very long "
# Option a
# Option c, no argument
# Option c, argument `more'
# Option b, argument ` very long '
# Remaining arguments:
# --> `par1'
# --> `another arg'
# --> `wow!*\?'

# Note that we use `"$@"' to let each command-line parameter expand to a 
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.

TEMP=`getopt -o h?ab:c:: --long help,a-long,b-long:,c-long:: -n '$0' -- "$@"`
HELP=$'\n'`cat $BASH_SOURCE | perl -wne 'print if /u[s]ag[e]:/ .. /mo[r]e [i]nfo, contac[t]/'`$'\n\n'  # note(2): random []'s to prevent this line from matching also (and viewing as part of the help text)

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-a|--a-long) echo "Option a" ; shift ;;
		-b|--b-long) echo "Option b, argument $2" ; shift 2 ;;
		-c|--c-long) 
			# c has an optional argument. As we are in quoted mode,
			# an empty parameter will be generated if its optional
			# argument is not found.
			case "$2" in
				"") echo "Option c, no argument"; shift 2 ;;
				*)  echo "Option c, argument $2" ; shift 2 ;;
			esac ;;
		--) shift ; break ;;
		-h|-\?|--help) 
			# str(i,l-(y-x)) = trim off first x chars before y text data -- do NOT change 
			echo -n "$HELP" | sed -r 's/^.{'$HELP_TRIMLEADINGCHARCOUNT'}//g'
			exit 0;;		
		*) echo "Internal error (disk full?)" ; exit 1 ;;
	esac
done
echo "Remaining arguments:"

for arg do echo '--> '"\`$arg'" ; done




